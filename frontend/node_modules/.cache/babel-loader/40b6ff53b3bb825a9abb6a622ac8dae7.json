{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\A3\\\\Documents\\\\restaurant-reviews\\\\frontend\\\\src\\\\components\\\\restaurants-list.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport RestaurantDataService from \"../services/restaurant\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RestaurantsList = props => {\n  _s();\n\n  // Set variables for search results\n  const [restaurants, setRestaurants] = useState([]);\n  const [searchName, setSearchName] = useState(\"\");\n  const [searchZip, setSearchZip] = useState(\"\");\n  const [searchCuisine, setSearchCuisine] = useState(\"\");\n  const [cuisines, setCuisines] = useState([\"All Cuisines\"]); // useEffect => component needs to do something after rendering\n\n  useEffect(() => {\n    retrieveRestaurants();\n    retrieveCuisines();\n  }, []);\n\n  const onChangeSearchName = e => {\n    const searchName = e.target.value;\n    setSearchName(searchName);\n  };\n\n  const onChangeSearchCuisine = e => {\n    const searchCuisine = e.target.value;\n    setSearchCuisine(searchCuisine);\n  };\n\n  const retrieveRestaurants = () => {\n    // do RestaurantDataServer.getAll, then log the data and set restaurants variable to the restaurant data\n    RestaurantDataService.getAll().then(response => {\n      console.log(response.data);\n      setRestaurants(response.data.restaurants);\n    }).catch(e => {\n      console.log(e);\n    });\n  };\n\n  const retrieveCuisines = () => {\n    RestaurantDataService.getCuisines().then(response => {\n      console.log(response.data);\n      setCuisines([\"All Cuisines\"].concat(response.data));\n    }).catch(e => {\n      console.log(e);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: \"Hello World\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RestaurantsList, \"qP4ccJq+qLTVWRY4CcjRCEH3CMA=\");\n\n_c = RestaurantsList;\nexport default RestaurantsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RestaurantsList\");","map":{"version":3,"sources":["C:/Users/A3/Documents/restaurant-reviews/frontend/src/components/restaurants-list.js"],"names":["React","useState","useEffect","RestaurantDataService","Link","RestaurantsList","props","restaurants","setRestaurants","searchName","setSearchName","searchZip","setSearchZip","searchCuisine","setSearchCuisine","cuisines","setCuisines","retrieveRestaurants","retrieveCuisines","onChangeSearchName","e","target","value","onChangeSearchCuisine","getAll","then","response","console","log","data","catch","getCuisines","concat"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,qBAAP,MAAkC,wBAAlC;AACA,SAASC,IAAT,QAAqB,kBAArB;;;AAEA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAAA;;AAC/B;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACY,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,CAAC,cAAD,CAAD,CAAxC,CAN+B,CAQ/B;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,mBAAmB;AACnBC,IAAAA,gBAAgB;AACjB,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMC,kBAAkB,GAAGC,CAAC,IAAI;AAC9B,UAAMX,UAAU,GAAGW,CAAC,CAACC,MAAF,CAASC,KAA5B;AACAZ,IAAAA,aAAa,CAACD,UAAD,CAAb;AACD,GAHD;;AAKA,QAAMc,qBAAqB,GAAGH,CAAC,IAAI;AACjC,UAAMP,aAAa,GAAGO,CAAC,CAACC,MAAF,CAASC,KAA/B;AACAR,IAAAA,gBAAgB,CAACD,aAAD,CAAhB;AACD,GAHD;;AAKA,QAAMI,mBAAmB,GAAG,MAAM;AAChC;AACAd,IAAAA,qBAAqB,CAACqB,MAAtB,GACGC,IADH,CACQC,QAAQ,IAAI;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACArB,MAAAA,cAAc,CAACkB,QAAQ,CAACG,IAAT,CAActB,WAAf,CAAd;AACD,KAJH,EAKGuB,KALH,CAKSV,CAAC,IAAI;AACVO,MAAAA,OAAO,CAACC,GAAR,CAAYR,CAAZ;AACD,KAPH;AAQD,GAVD;;AAYA,QAAMF,gBAAgB,GAAG,MAAM;AAC7Bf,IAAAA,qBAAqB,CAAC4B,WAAtB,GACGN,IADH,CACQC,QAAQ,IAAI;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACAb,MAAAA,WAAW,CAAC,CAAC,cAAD,EAAiBgB,MAAjB,CAAwBN,QAAQ,CAACG,IAAjC,CAAD,CAAX;AACD,KAJH,EAKGC,KALH,CAKSV,CAAC,IAAI;AACVO,MAAAA,OAAO,CAACC,GAAR,CAAYR,CAAZ;AACD,KAPH;AAQD,GATD;;AAYA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CArDD;;GAAMf,e;;KAAAA,e;AAuDN,eAAeA,eAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport RestaurantDataService from \"../services/restaurant\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst RestaurantsList = props => {\r\n  // Set variables for search results\r\n  const [restaurants, setRestaurants] = useState([]);\r\n  const [searchName, setSearchName] = useState(\"\");\r\n  const [searchZip, setSearchZip] = useState(\"\");\r\n  const [searchCuisine, setSearchCuisine] = useState(\"\");\r\n  const [cuisines, setCuisines] = useState([\"All Cuisines\"])\r\n\r\n  // useEffect => component needs to do something after rendering\r\n  useEffect(() => {\r\n    retrieveRestaurants();\r\n    retrieveCuisines();\r\n  }, []);\r\n\r\n  const onChangeSearchName = e => {\r\n    const searchName = e.target.value;\r\n    setSearchName(searchName);\r\n  }\r\n\r\n  const onChangeSearchCuisine = e => {\r\n    const searchCuisine = e.target.value;\r\n    setSearchCuisine(searchCuisine);\r\n  }\r\n\r\n  const retrieveRestaurants = () => {\r\n    // do RestaurantDataServer.getAll, then log the data and set restaurants variable to the restaurant data\r\n    RestaurantDataService.getAll()\r\n      .then(response => {\r\n        console.log(response.data);\r\n        setRestaurants(response.data.restaurants);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  const retrieveCuisines = () => {\r\n    RestaurantDataService.getCuisines()\r\n      .then(response => {\r\n        console.log(response.data);\r\n        setCuisines([\"All Cuisines\"].concat(response.data));\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      Hello World\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RestaurantsList;"]},"metadata":{},"sourceType":"module"}