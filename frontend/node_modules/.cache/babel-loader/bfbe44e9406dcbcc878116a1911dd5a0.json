{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\A3\\\\Documents\\\\restaurant-reviews\\\\frontend\\\\src\\\\components\\\\restaurants.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport RestaurantDataService from \"../services/restaurant\";\nimport { Link } from \"react-router-dom\"; // props is our input var kinda\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Restaurant(_ref) {\n  _s();\n\n  let {\n    props\n  } = _ref;\n  const initialRestaurantState = {\n    id: null,\n    name: \"\",\n    address: {},\n    cuisine: \"\",\n    reviews: []\n  };\n  const [restaurant, setRestaurant] = useState(initialRestaurantState);\n\n  const getRestaurant = id => {\n    RestaurantDataService.get(id).then(response => {\n      setRestaurant(response.data);\n      console.log(response.data);\n    }).catch(e => {\n      console.log(e);\n    });\n  }; //  use Effect has a dependency ( the array at the bottom )\n  // use Effect will only do the effect if the dependency has changed\n  // else it will remain constant\n\n\n  useEffect(() => {\n    console.log(props.user);\n    getRestaurant(props.id);\n  }, []);\n\n  const deleteReview = (reviewId, index) => {\n    RestaurantDataService.deleteReview(reviewId, props.user.id).then(response => {\n      setRestaurant(prevState => {\n        prevState.reviews.splice(index, 1);\n        return { ...prevState\n        };\n      });\n    }).catch(e => {\n      console.log(e);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Hello\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Restaurant, \"K66YcpirxX+Ex2PTJMb4G+rTODg=\");\n\n_c = Restaurant;\nexport default Restaurant;\n\nvar _c;\n\n$RefreshReg$(_c, \"Restaurant\");","map":{"version":3,"sources":["C:/Users/A3/Documents/restaurant-reviews/frontend/src/components/restaurants.js"],"names":["React","useState","useEffect","RestaurantDataService","Link","Restaurant","props","initialRestaurantState","id","name","address","cuisine","reviews","restaurant","setRestaurant","getRestaurant","get","then","response","data","console","log","catch","e","user","deleteReview","reviewId","index","prevState","splice"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,qBAAP,MAAkC,wBAAlC;AACA,SAASC,IAAT,QAAqB,kBAArB,C,CAGA;;;AAEA,OAAO,SAASC,UAAT,OAA6B;AAAA;;AAAA,MAAT;AAACC,IAAAA;AAAD,GAAS;AAElC,QAAMC,sBAAsB,GAAG;AAC7BC,IAAAA,EAAE,EAAE,IADyB;AAE7BC,IAAAA,IAAI,EAAE,EAFuB;AAG7BC,IAAAA,OAAO,EAAE,EAHoB;AAI7BC,IAAAA,OAAO,EAAE,EAJoB;AAK7BC,IAAAA,OAAO,EAAE;AALoB,GAA/B;AAQA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAACM,sBAAD,CAA5C;;AAEA,QAAMQ,aAAa,GAAGP,EAAE,IAAI;AAC1BL,IAAAA,qBAAqB,CAACa,GAAtB,CAA0BR,EAA1B,EACGS,IADH,CACQC,QAAQ,IAAI;AAChBJ,MAAAA,aAAa,CAACI,QAAQ,CAACC,IAAV,CAAb;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACC,IAArB;AACD,KAJH,EAKGG,KALH,CAKSC,CAAC,IAAI;AACVH,MAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACD,KAPH;AAQD,GATD,CAZkC,CAuBlC;AACA;AACA;;;AACArB,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,OAAO,CAACC,GAAR,CAAYf,KAAK,CAACkB,IAAlB;AACAT,IAAAA,aAAa,CAACT,KAAK,CAACE,EAAP,CAAb;AACD,GAHQ,EAGN,EAHM,CAAT;;AAMA,QAAMiB,YAAY,GAAG,CAACC,QAAD,EAAWC,KAAX,KAAqB;AACxCxB,IAAAA,qBAAqB,CAACsB,YAAtB,CAAmCC,QAAnC,EAA6CpB,KAAK,CAACkB,IAAN,CAAWhB,EAAxD,EACGS,IADH,CACQC,QAAQ,IAAI;AAChBJ,MAAAA,aAAa,CAAEc,SAAD,IAAe;AAC3BA,QAAAA,SAAS,CAAChB,OAAV,CAAkBiB,MAAlB,CAAyBF,KAAzB,EAAgC,CAAhC;AACA,eAAO,EACL,GAAGC;AADE,SAAP;AAGD,OALY,CAAb;AAMD,KARH,EASGN,KATH,CASSC,CAAC,IAAI;AACVH,MAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACD,KAXH;AAYD,GAbD;;AAeA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+DD;;GA9GelB,U;;KAAAA,U;AAgHhB,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport RestaurantDataService from \"../services/restaurant\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\n// props is our input var kinda\r\n\r\nexport function Restaurant({props}) {\r\n\r\n  const initialRestaurantState = {\r\n    id: null,\r\n    name: \"\",\r\n    address: {},\r\n    cuisine: \"\",\r\n    reviews: []\r\n  };\r\n\r\n  const [restaurant, setRestaurant] = useState(initialRestaurantState);\r\n\r\n  const getRestaurant = id => {\r\n    RestaurantDataService.get(id)\r\n      .then(response => {\r\n        setRestaurant(response.data);\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  //  use Effect has a dependency ( the array at the bottom )\r\n  // use Effect will only do the effect if the dependency has changed\r\n  // else it will remain constant\r\n  useEffect(() => {\r\n    console.log(props.user)\r\n    getRestaurant(props.id);\r\n  }, []);\r\n\r\n\r\n  const deleteReview = (reviewId, index) => {\r\n    RestaurantDataService.deleteReview(reviewId, props.user.id)\r\n      .then(response => {\r\n        setRestaurant((prevState) => {\r\n          prevState.reviews.splice(index, 1)\r\n          return({\r\n            ...prevState\r\n          })\r\n        })\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      Hello\r\n      {/* First Check if there is a restaurant\r\n      {restaurant ? (\r\n        // if there is a restaurant\r\n        <div>\r\n          <h5>{restaurant.name}</h5>\r\n          <p>\r\n            <strong>Cuisine: </strong>{restaurant.cuisine}<br/>\r\n            <strong>Address: </strong>{restaurant.address.building} {restaurant.address.street}, {restaurant.address.zipcode}\r\n          </p>\r\n          <Link to={\"/restaurants/\" + props.match.params.id + \"/review\"} className=\"btn btn-primary\">\r\n            Add Review\r\n          </Link>\r\n          <h4> Reviews </h4>\r\n          <div className=\"row\">\r\n            {/* Check if restaurant reviews length is > 0 \r\n            {restaurant.reviews.length > 0 ? (\r\n             restaurant.reviews.map((review, index) => {\r\n               return (\r\n                 <div className=\"col-lg-4 pb-1\" key={index}>\r\n                   <div className=\"card\">\r\n                     <div className=\"card-body\">\r\n                       <p className=\"card-text\">\r\n                         {review.text}<br/>\r\n                         <strong>User: </strong>{review.name}<br/>\r\n                         <strong>Date: </strong>{review.date}\r\n                       </p>\r\n                       {/* if props.user and the userid is matching with the review \r\n                       {props.user && props.user.id === review.user_id &&\r\n                          <div className=\"row\">\r\n                            <a onClick={() => deleteReview(review._id, index)} className=\"btn btn-primary col-lg-5 mx-1 mb-1\">Delete</a>\r\n                            <Link to={{\r\n                              pathname: \"/restaurants/\" + props.match.params.id + \"/review\",\r\n                              state: {\r\n                                currentReview: review\r\n                              }\r\n                            }} className=\"btn btn-primary col-lg-5 mx-1 mb-1\">Edit</Link>\r\n                          </div>                   \r\n                       }\r\n                     </div>\r\n                   </div>\r\n                 </div>\r\n               );\r\n             })\r\n            ) : (\r\n            <div className=\"col-sm-4\">\r\n              <p>No reviews yet.</p>\r\n            </div>\r\n            )}\r\n\r\n          </div>\r\n\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <br />\r\n          <p>No restaurant selected.</p>\r\n        </div>\r\n      )} */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Restaurant;"]},"metadata":{},"sourceType":"module"}